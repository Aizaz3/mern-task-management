{"ast":null,"code":"const initialState = {\n  tasks: [],\n  loading: true,\n  error: null\n};\nconst taskReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'FETCH_TASKS_SUCCESS':\n      return {\n        ...state,\n        tasks: action.payload,\n        loading: false\n      };\n    case 'CREATE_TASK_SUCCESS':\n      return {\n        ...state,\n        tasks: [...state.tasks, action.payload]\n      };\n    case 'UPDATE_TASK_SUCCESS':\n      return {\n        ...state,\n        tasks: state.tasks.map(task => task._id === action.payload._id ? action.payload : task)\n      };\n    case 'DELETE_TASK_SUCCESS':\n      return {\n        ...state,\n        tasks: state.tasks.filter(task => task._id !== action.payload)\n      };\n    case 'FETCH_TASKS_FAIL':\n    case 'CREATE_TASK_FAIL':\n    case 'UPDATE_TASK_FAIL':\n    case 'DELETE_TASK_FAIL':\n      return {\n        ...state,\n        error: action.payload,\n        loading: false\n      };\n    default:\n      return state;\n  }\n};\nexport default taskReducer;","map":{"version":3,"names":["initialState","tasks","loading","error","taskReducer","state","action","type","payload","map","task","_id","filter"],"sources":["E:/mern-task-management-system/frontend/src/reducers/taskReducer.js"],"sourcesContent":["const initialState = {\r\n  tasks: [],\r\n  loading: true,\r\n  error: null\r\n};\r\n\r\nconst taskReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'FETCH_TASKS_SUCCESS':\r\n      return {\r\n        ...state,\r\n        tasks: action.payload,\r\n        loading: false\r\n      };\r\n    case 'CREATE_TASK_SUCCESS':\r\n      return {\r\n        ...state,\r\n        tasks: [...state.tasks, action.payload]\r\n      };\r\n    case 'UPDATE_TASK_SUCCESS':\r\n      return {\r\n        ...state,\r\n        tasks: state.tasks.map(task => task._id === action.payload._id ? action.payload : task)\r\n      };\r\n    case 'DELETE_TASK_SUCCESS':\r\n      return {\r\n        ...state,\r\n        tasks: state.tasks.filter(task => task._id !== action.payload)\r\n      };\r\n    case 'FETCH_TASKS_FAIL':\r\n    case 'CREATE_TASK_FAIL':\r\n    case 'UPDATE_TASK_FAIL':\r\n    case 'DELETE_TASK_FAIL':\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        loading: false\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default taskReducer;\r\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG;EACnBC,KAAK,EAAE,EAAE;EACTC,OAAO,EAAE,IAAI;EACbC,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,WAAW,GAAGA,CAACC,KAAK,GAAGL,YAAY,EAAEM,MAAM,KAAK;EACpD,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,qBAAqB;MACxB,OAAO;QACL,GAAGF,KAAK;QACRJ,KAAK,EAAEK,MAAM,CAACE,OAAO;QACrBN,OAAO,EAAE;MACX,CAAC;IACH,KAAK,qBAAqB;MACxB,OAAO;QACL,GAAGG,KAAK;QACRJ,KAAK,EAAE,CAAC,GAAGI,KAAK,CAACJ,KAAK,EAAEK,MAAM,CAACE,OAAO;MACxC,CAAC;IACH,KAAK,qBAAqB;MACxB,OAAO;QACL,GAAGH,KAAK;QACRJ,KAAK,EAAEI,KAAK,CAACJ,KAAK,CAACQ,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,GAAG,KAAKL,MAAM,CAACE,OAAO,CAACG,GAAG,GAAGL,MAAM,CAACE,OAAO,GAAGE,IAAI;MACxF,CAAC;IACH,KAAK,qBAAqB;MACxB,OAAO;QACL,GAAGL,KAAK;QACRJ,KAAK,EAAEI,KAAK,CAACJ,KAAK,CAACW,MAAM,CAACF,IAAI,IAAIA,IAAI,CAACC,GAAG,KAAKL,MAAM,CAACE,OAAO;MAC/D,CAAC;IACH,KAAK,kBAAkB;IACvB,KAAK,kBAAkB;IACvB,KAAK,kBAAkB;IACvB,KAAK,kBAAkB;MACrB,OAAO;QACL,GAAGH,KAAK;QACRF,KAAK,EAAEG,MAAM,CAACE,OAAO;QACrBN,OAAO,EAAE;MACX,CAAC;IACH;MACE,OAAOG,KAAK;EAChB;AACF,CAAC;AAED,eAAeD,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}