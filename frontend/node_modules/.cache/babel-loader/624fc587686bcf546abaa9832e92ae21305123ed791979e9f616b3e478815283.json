{"ast":null,"code":"// authActions.js\nimport axios from 'axios';\nimport { SIGNIN_SUCCESS, SIGNIN_FAIL, REGISTER_SUCCESS, REGISTER_FAIL, LOGOUT, FETCH_PROFILE_SUCCESS, FETCH_PROFILE_FAIL, UPDATE_EMAIL_SUCCESS, UPDATE_EMAIL_FAIL, UPDATE_PASSWORD_SUCCESS, UPDATE_PASSWORD_FAIL } from './types';\n\n// Sign-in action\nexport const signin = (username, password) => async dispatch => {\n  try {\n    const res = await axios.post('http://localhost:5000/api/auth/signin', {\n      username,\n      password\n    });\n    const {\n      token\n    } = res.data;\n\n    // Store the token in localStorage or sessionStorage\n    localStorage.setItem('token', token); // or sessionStorage.setItem('token', token);\n\n    dispatch({\n      type: SIGNIN_SUCCESS,\n      payload: {\n        token\n      }\n    });\n    return token;\n  } catch (error) {\n    dispatch({\n      type: SIGNIN_FAIL\n    });\n    return null;\n  }\n};\n\n// Logout action\nexport const logout = () => dispatch => {\n  localStorage.removeItem('token'); // or sessionStorage.removeItem('token');\n  dispatch({\n    type: LOGOUT\n  });\n};\n\n// Fetch profile action to check if user is authenticated\nexport const authenticateUser = () => async dispatch => {\n  const token = localStorage.getItem('token'); // or sessionStorage.getItem('token');\n  console.log('Token from storage:', token); // Log the token here\n\n  if (!token) {\n    return dispatch({\n      type: FETCH_PROFILE_FAIL\n    });\n  }\n  try {\n    const res = await axios.get('http://localhost:5000/api/auth/profile', {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    dispatch({\n      type: FETCH_PROFILE_SUCCESS,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: FETCH_PROFILE_FAIL\n    });\n  }\n}; // Sign Up Action\nexport const signup = (username, email, password) => async dispatch => {\n  try {\n    await axios.post('http://localhost:5000/api/auth/signup', {\n      username,\n      email,\n      password\n    });\n    dispatch({\n      type: REGISTER_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: REGISTER_FAIL,\n      payload: 'Error creating user'\n    });\n  }\n};\nexport const updateEmail = (token, userId, newEmail) => async dispatch => {\n  try {\n    await axios.put('http://localhost:5000/api/auth/update-email', {\n      userId,\n      newEmail\n    }, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    dispatch({\n      type: UPDATE_EMAIL_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_EMAIL_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};\n// Update password action\nexport const updatePassword = (token, userId, oldPassword, newPassword) => async dispatch => {\n  try {\n    await axios.put('http://localhost:5000/api/auth/update-password', {\n      userId,\n      oldPassword,\n      newPassword\n    }, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    dispatch({\n      type: UPDATE_PASSWORD_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_PASSWORD_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};","map":{"version":3,"names":["axios","SIGNIN_SUCCESS","SIGNIN_FAIL","REGISTER_SUCCESS","REGISTER_FAIL","LOGOUT","FETCH_PROFILE_SUCCESS","FETCH_PROFILE_FAIL","UPDATE_EMAIL_SUCCESS","UPDATE_EMAIL_FAIL","UPDATE_PASSWORD_SUCCESS","UPDATE_PASSWORD_FAIL","signin","username","password","dispatch","res","post","token","data","localStorage","setItem","type","payload","error","logout","removeItem","authenticateUser","getItem","console","log","get","headers","signup","email","err","updateEmail","userId","newEmail","put","response","message","updatePassword","oldPassword","newPassword"],"sources":["E:/mern-task-management-system/frontend/src/actions/authActions.js"],"sourcesContent":["// authActions.js\r\nimport axios from 'axios';\r\nimport { SIGNIN_SUCCESS, SIGNIN_FAIL, REGISTER_SUCCESS, REGISTER_FAIL, LOGOUT, FETCH_PROFILE_SUCCESS, FETCH_PROFILE_FAIL, UPDATE_EMAIL_SUCCESS, UPDATE_EMAIL_FAIL, UPDATE_PASSWORD_SUCCESS, UPDATE_PASSWORD_FAIL  } from './types';\r\n\r\n// Sign-in action\r\nexport const signin = (username, password) => async (dispatch) => {\r\n  try {\r\n    const res = await axios.post('http://localhost:5000/api/auth/signin', { username, password });\r\n    const { token } = res.data;\r\n\r\n    // Store the token in localStorage or sessionStorage\r\n    localStorage.setItem('token', token); // or sessionStorage.setItem('token', token);\r\n\r\n    dispatch({ type: SIGNIN_SUCCESS, payload: { token } });\r\n    return token;\r\n  } catch (error) {\r\n    dispatch({ type: SIGNIN_FAIL });\r\n    return null;\r\n  }\r\n};\r\n\r\n// Logout action\r\nexport const logout = () => (dispatch) => {\r\n  localStorage.removeItem('token'); // or sessionStorage.removeItem('token');\r\n  dispatch({ type: LOGOUT });\r\n};\r\n\r\n// Fetch profile action to check if user is authenticated\r\nexport const authenticateUser = () => async (dispatch) => {\r\n  const token = localStorage.getItem('token'); // or sessionStorage.getItem('token');\r\n  console.log('Token from storage:', token); // Log the token here\r\n\r\n  if (!token) {\r\n    return dispatch({ type: FETCH_PROFILE_FAIL });\r\n  }\r\n\r\n  try {\r\n    const res = await axios.get('http://localhost:5000/api/auth/profile', {\r\n      headers: { 'Authorization': `Bearer ${token}` }\r\n    });\r\n    dispatch({ type: FETCH_PROFILE_SUCCESS, payload: res.data });\r\n  } catch (error) {\r\n    dispatch({ type: FETCH_PROFILE_FAIL });\r\n  }\r\n};// Sign Up Action\r\nexport const signup = (username, email, password) => async (dispatch) => {\r\n  try {\r\n    await axios.post('http://localhost:5000/api/auth/signup', { username, email, password });\r\n    dispatch({\r\n      type: REGISTER_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: REGISTER_FAIL,\r\n      payload: 'Error creating user',\r\n    });\r\n  }\r\n};\r\n\r\nexport const updateEmail = (token, userId, newEmail) => async (dispatch) => {\r\n  try {\r\n    await axios.put('http://localhost:5000/api/auth/update-email', { userId, newEmail }, {\r\n      headers: { 'Authorization': `Bearer ${token}` }\r\n    });\r\n    dispatch({ type: UPDATE_EMAIL_SUCCESS });\r\n  } catch (error) {\r\n    dispatch({ type: UPDATE_EMAIL_FAIL, payload: error.response.data.message });\r\n  }\r\n};\r\n// Update password action\r\nexport const updatePassword = (token, userId, oldPassword, newPassword) => async (dispatch) => {\r\n  try {\r\n    await axios.put('http://localhost:5000/api/auth/update-password', { userId, oldPassword, newPassword }, {\r\n      headers: { 'Authorization': `Bearer ${token}` }\r\n    });\r\n    dispatch({ type: UPDATE_PASSWORD_SUCCESS });\r\n  } catch (error) {\r\n    dispatch({ type: UPDATE_PASSWORD_FAIL, payload: error.response.data.message });\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}